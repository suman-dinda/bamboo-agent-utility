#!/bin/bash
# Disitrubted under the MIT license
# Copyright (c) 2014 Nicolae Ghimbovschi

set -e

VERSION=1.0.0

function printLog() 
{

  echo ""
  echo ">>> $1"
  echo ""
}

function installLaunchAgent() 
{
cat > "${LAUNCHCTL_PATH}" << EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
   <key>Label</key>
   <string>com.${AGENT_ID}</string>
   <key>Program</key>
   <string>${BAMBOOAGENT_PATH}/bin/bamboo-agent.sh</string>
   <key>ProgramArguments</key>
   <array>
        <string>${BAMBOOAGENT_PATH}/bin/bamboo-agent.sh</string>
        <string>console</string>
    </array>

   <key>RunAtLoad</key>
   <true/>
   <key>KeepAlive</key>
   <true/>
   <key>StandardOutPath</key>
   <string>/tmp/${AGENT_ID}-agent.log</string>
   <key>StandardErrorPath</key>
   <string>/tmp/${AGENT_ID}-agent_err.log</string>
</dict>
</plist>
EOF

if [ X"$URL_SCHEME" == X"https" ]
then
  importSSLCertificate
fi

launchctl load -w "${LAUNCHCTL_PATH}"
printLog "Agent configured and loaded: ${LAUNCHCTL_PATH}"

}

function importSSLCertificate()
{
  printLog "Importing the SSL certificate ..."

  KEYSTOREFILE="${BAMBOOAGENT_PATH}/keystore.ks"
  KEYSTOREPASS=secret

  # get the SSL certificate
  openssl s_client -connect "${URL_HOST}:443" </dev/null \
      | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > "/tmp/${URL_HOST}.cert"

  # create a keystore and import certificate
  keytool -import -noprompt -trustcacerts \
      -alias "${URL_HOST}" -file "/tmp/${URL_HOST}.cert" \
      -keystore "${KEYSTOREFILE}" -storepass "${KEYSTOREPASS}"

  echo "wrapper.java.additional.3=-Djavax.net.ssl.keyStore=${KEYSTOREFILE}" >> "${BAMBOOAGENT_PATH}/conf/wrapper.conf"
  echo "wrapper.java.additional.4=-Djavax.net.ssl.keyStorePassword=${KEYSTOREPASS}" >> "${BAMBOOAGENT_PATH}/conf/wrapper.conf"
  echo "wrapper.java.additional.5=-Djavax.net.ssl.trustStore=${KEYSTOREFILE}" >> "${BAMBOOAGENT_PATH}/conf/wrapper.conf"
}

function createMissingDirs() 
{

  LAUNCHAGENTS_DIR="${HOME}/Library/LaunchAgents"

  if [ ! -d "${LAUNCHAGENTS_DIR}" ]
  then
      mkdir -p "${LAUNCHAGENTS_DIR}"
  fi

  if [ ! -d "${BAMBOOAGENT_PATH}" ]
  then
      mkdir -p "${BAMBOOAGENT_PATH}"
  fi

}

function uninstallAgent()
{
  printLog "Uninstalling Bamboo agent from: ${INSTALL_PATH}."
  launchctl unload -w "${LAUNCHCTL_PATH}"
  rm -f "${LAUNCHCTL_PATH}"
  rm -fr "${INSTALL_PATH}"
}

function installAgent()
{
  printLog "Installing Bamboo agent to: ${INSTALL_PATH}."
  printLog "Downloading Bamboo agent installer from: ${DOWNLOAD_URL}."

  ######
  URL_SCHEME=$(echo "${DOWNLOAD_URL}" | awk -F/ '{print $1}' | sed s/://g) #https or http
  URL_HOST=$(echo "${DOWNLOAD_URL}" | awk -F/ '{print $3}') #www.bamboo.com

  LAUNCHCTL_PATH="${HOME}/Library/LaunchAgents/com.${AGENT_ID}.plist"
  AGENT_SERVER_URL="${URL_SCHEME}://${URL_HOST}/agentServer/"

  printLog "Creating the missing paths ..."
  createMissingDirs

  #download the agent
  printLog "Downloading the agent ..."
  curl -L -k -o atlassian-bamboo-agent-installer.jar "$DOWNLOAD_URL"

  #install the agent
  printLog "Installing the agent ..."
  java -Dbamboo.agent.ignoreServerCertName=true "-Dbamboo.home=${BAMBOOAGENT_PATH}" -jar atlassian-bamboo-agent-installer.jar  "${AGENT_SERVER_URL}" install

  #inject env varibles from ~/.profile
  printLog "Adding ~/.profile as source ..."
  cat "${BAMBOOAGENT_PATH}/bin/bamboo-agent.sh" | sed "s|export PATH|source ~/.profile; export PATH|g" > "${BAMBOOAGENT_PATH}/bin/bamboo-agent.sh.1"
  mv "${BAMBOOAGENT_PATH}/bin/bamboo-agent.sh.1" "${BAMBOOAGENT_PATH}/bin/bamboo-agent.sh"
  chmod +x "${BAMBOOAGENT_PATH}/bin/bamboo-agent.sh"

  printLog "Creating the launchd agent ..."
  installLaunchAgent

  printLog "Done."
}

function usage() 
{
    echo "Usage:"
    echo ""
    echo "Installing the agent:"
    echo "export DOWNLOAD_URL='https://bamboo.server.com/agentServer/agentInstaller/atlassian-bamboo-agent-installer-5.7.2.jar'"
    echo "$0 install /bamboo/agent/install/path"
    echo ""
    echo "Uninstalling the agent:"
    echo "$0 uninstall /bamboo/agent/install/path"
    exit 1
}

if [[ "$#" -gt 2 ]]; then
    usage
elif [[ "$#" == 0  ]]; then
    usage
fi

ACTION="$1"
INSTALL_PATH="$2"
AGENT_ID=$(basename "${INSTALL_PATH}")
BAMBOOAGENT_PATH="${INSTALL_PATH}/${AGENT_ID}"

case "${ACTION}" in
  "install")
    installAgent
    ;;

  "uninstall")
    uninstallAgent
    ;;

  "-v"|"--version")
    echo "${VERSION}"
    ;;

  *)
    usage
    ;;
esac

